rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // HELPER FUNCTIONS
    // ========================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth != null ? 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 
        null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isSuperAdmin() {
      return hasRole('superadmin');
    }
    
    function isAdmin() {
      return hasAnyRole(['admin', 'superadmin']);
    }
    
    function isCreator() {
      return hasAnyRole(['creator', 'admin', 'superadmin']);
    }

    // ========================================
    // CONTENT RULES (MAIN FOCUS)
    // ========================================
    
    match /content/{contentId} {
      // Allow all reads for now (testing mode)
      allow read: if true;
      
      // Allow authenticated users to create content
      allow create: if isAuthenticated();
      
      // Allow content creators to edit their own content OR admins to edit any
      allow update: if isAuthenticated() && 
        (resource.data.creatorUid == request.auth.uid || isAdmin());
      
      // Allow content creators to delete their own content OR admins to delete any
      allow delete: if isAuthenticated() && 
        (resource.data.creatorUid == request.auth.uid || isAdmin());
    }

    // ========================================
    // USER MANAGEMENT
    // ========================================
    
    match /users/{userId} {
      // Users can read/write their own profile, admins can access all
      allow read, write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
    }

    // ========================================
    // CREATOR PROFILES
    // ========================================
    
    match /creator_profiles/{creatorId} {
      // Public read for discovery
      allow read: if true;
      // Creators can manage their own profiles
      allow write: if isOwner(creatorId) || isAdmin();
      allow create: if isAuthenticated();
    }
    
    match /creators_index/{creatorId} {
      // Public read for discovery
      allow read: if true;
      // Creators can update their index entry
      allow write: if isOwner(creatorId) || isAdmin();
      allow create: if isAuthenticated();
    }

    // ========================================
    // USER INTERACTIONS
    // ========================================
    
    match /coaching_requests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.targetCreatorUid == request.auth.uid || 
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
    }
    
    match /requests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.uid == request.auth.uid || 
        resource.data.targetCreatorUid == request.auth.uid || 
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        resource.data.uid == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
    }

    // ========================================
    // PROGRESS & ANALYTICS
    // ========================================
    
    match /progress/{userId}/items/{itemId} {
      allow read, write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // ========================================
    // SUBSCRIPTIONS & BILLING
    // ========================================
    
    match /subscriptions/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }
    
    match /creator_earnings/{creatorId} {
      allow read: if isOwner(creatorId) || isAdmin();
      allow write: if isAdmin();
    }

    // ========================================
    // NOTIFICATIONS & MESSAGING
    // ========================================
    
    match /notifications/{userId}/messages/{messageId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
    }
    
    match /messages/{chatId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && (
        request.auth.uid in resource.data.participants || 
        request.auth.uid in request.resource.data.participants
      );
      allow create: if isAuthenticated();
    }

    // ========================================
    // REVIEWS & EVENTS
    // ========================================
    
    match /reviews/{reviewId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    match /events/{eventId} {
      allow read: if resource.data.status == 'published' || 
        resource.data.creatorId == request.auth.uid || 
        isAdmin();
      allow write: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && isCreator();
    }
    
    match /event_registrations/{registrationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.creatorId == request.auth.uid || 
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
    }

    // ========================================
    // SYSTEM SETTINGS
    // ========================================
    
    match /settings/{document=**} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }

    // ========================================
    // DEFAULT DENY
    // ========================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ========================================
// STORAGE RULES
// ========================================

service firebase.storage {
  match /b/{bucket}/o {
    
    // Profile pictures - public read, owner write
    match /profile-pictures/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Content files - public read, creator write  
    match /content/{creatorId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == creatorId;
    }
    
    // Coaching files - restricted access
    match /coaching-files/{userId}/{fileName} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) && 
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['creator', 'admin', 'superadmin']
      );
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User uploads
    match /uploads/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admin files
    match /admin/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) && 
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
  }
}