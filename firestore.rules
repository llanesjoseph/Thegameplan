rules_version = '2';

// Game Plan Platform - Production Security Rules
// Comprehensive role-based access control with medical safety and audit logging

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== HELPER FUNCTIONS =====
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has admin privileges
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
    
    // Check if user is superadmin
    function isSuperAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Check if user is a coach (primary coach function)
    function isCoach() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach';
    }

    // Legacy creator check - kept for backwards compatibility during migration
    function isCreator() {
      return isCoach();
    }

    // Check if user has coach role or higher (includes legacy 'creator' role)
    function isCreatorOrHigher() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['creator', 'coach', 'assistant_coach', 'admin', 'superadmin'];
    }
    
    // Validate user data structure
    // NOTE: This allows additional fields beyond email/role for onboarding, profiles, etc.
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'role']) &&
             request.resource.data.email is string &&
             request.resource.data.role in ['creator', 'athlete', 'coach', 'assistant_coach', 'admin', 'superadmin'] &&
             request.resource.data.email.matches('.*@.*\\..*');
    }
    
    // Validate content data structure
    function isValidContentData() {
      return request.resource.data.keys().hasAll(['title', 'creatorUid', 'status']) &&
             request.resource.data.title is string &&
             request.resource.data.creatorUid is string &&
             request.resource.data.status in ['draft', 'published', 'archived'] &&
             request.resource.data.title.size() <= 200 &&
             request.resource.data.title.size() >= 1 &&
             (!('sport' in request.resource.data) || request.resource.data.sport is string);
    }
    
    // ===== CORE COLLECTIONS =====
    
    // Users collection - Core user data
    match /users/{userId} {
      // CRITICAL: Users MUST be able to read their own document without role checks
      // to prevent circular dependency (isAdmin requires reading this same document)
      allow read: if isOwner(userId);

      // Admins can read all user documents
      allow read: if isAuthenticated() &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];

      // Allow reading coach/creator user documents for discovery (name, basic info)
      allow read: if isAuthenticated() &&
                     exists(/databases/$(database)/documents/users/$(userId)) &&
                     get(/databases/$(database)/documents/users/$(userId)).data.role in ['coach', 'assistant_coach'];

      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&
                       isValidUserData();
      // Allow users to update their own profile (except role changes)
      // Only admins can change roles
      allow update: if (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) && isValidUserData()) ||
                       (isAuthenticated() &&
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'] &&
                        isValidUserData());
      allow delete: if isAuthenticated() &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Profiles collection - Extended user profiles
    match /profiles/{userId} {
      allow read: if isOwner(userId) || 
                     isAdmin() || 
                     (resource.data.isPublic == true);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Content collection - Lessons, courses, educational content
    match /content/{contentId} {
      // Allow reading individual documents (get)
      allow get: if isAuthenticated() &&
                    (resource.data.status == 'published' ||
                     isOwner(resource.data.creatorUid) ||
                     isAdmin());

      // Allow listing content (queries) - creators can query their own content,
      // anyone can query published content, admins can query all
      allow list: if isAuthenticated() &&
                     (isCreatorOrHigher() || isAdmin());

      allow create: if isCreatorOrHigher() &&
                       isValidContentData() &&
                       request.resource.data.creatorUid == request.auth.uid;
      allow update: if (isOwner(resource.data.creatorUid) || isAdmin()) &&
                       isValidContentData() &&
                       resource.data.creatorUid == request.resource.data.creatorUid;
      allow delete: if isOwner(resource.data.creatorUid) || isAdmin();
    }
    
    // Coaches collection - Public coach discovery
    match /coaches/{coachId} {
      allow read: if true; // Public coach profiles
      allow create: if isAuthenticated() && request.auth.uid == coachId;
      allow update: if isOwner(coachId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Creator public profiles - Public creator discovery (LEGACY)
    match /creatorPublic/{creatorSlug} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Creator private profiles - Creator business data (LEGACY)
    match /creator_profiles/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }

    // Coach profiles - Coach business data
    match /coach_profiles/{userId} {
      allow read: if isOwner(userId) || isCoach() || isAdmin();
      allow create: if isOwner(userId) && (isCoach() || isCreator());
      allow update: if isOwner(userId) && (isCoach() || isCreator()) || isAdmin();
      allow delete: if isAdmin();
    }

    // Coach ingestion links - Coach invitation management
    match /coach_ingestion_links/{linkId} {
      allow read: if isCreatorOrHigher();
      allow create: if isCreatorOrHigher();
      allow update: if isCreatorOrHigher();
      allow delete: if isAdmin();
    }
    
    // Coaching requests - User-to-creator interactions
    match /coaching_requests/{requestId} {
      allow read: if isOwner(resource.data.userId) || 
                     isOwner(resource.data.creatorId) || 
                     isAdmin();
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'creatorId', 'message']) &&
                       request.resource.data.message is string &&
                       request.resource.data.message.size() <= 2000;
      allow update: if isOwner(resource.data.creatorId) || isAdmin();
    }
    
    // Contributor applications - Creator application process
    match /contributorApplications/{applicationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['firstName', 'lastName', 'email', 'primarySport']) &&
                       request.resource.data.email == request.auth.token.email;
      allow update: if isAdmin();
    }
    
    // Events - Scheduled coaching sessions
    match /events/{eventId} {
      allow read: if isOwner(resource.data.creatorUid) || 
                     isAdmin() ||
                     (resource.data.participants != null && 
                      request.auth.uid in resource.data.participants);
      allow create: if isCreatorOrHigher() &&
                       request.resource.data.creatorUid == request.auth.uid;
      allow update: if isOwner(resource.data.creatorUid) || isAdmin();
      allow delete: if isOwner(resource.data.creatorUid) || isAdmin();
    }
    
    // Notifications - User notification system (subcollections)
    match /notifications/{userId}/messages/{messageId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // AI interaction logs - AI coaching session logs (admin only)
    match /ai_interaction_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // AI sessions - AI session management
    match /ai_sessions/{sessionId} {
      // Users can read and create their own sessions, admins can access all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }
    
    // AI content flags - Content moderation flags (admin only)
    match /ai_content_flags/{flagId} {
      allow read, write: if isAdmin();
    }
    
    // Disclaimer acceptances - Legal compliance tracking
    match /disclaimer_acceptances/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Chat conversations - AI assistant chat history
    match /chatConversations/{conversationId} {
      // Conversation metadata - users can read/write their own conversations
      allow read, write: if isAuthenticated() &&
                            resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Chat messages subcollection
      match /messages/{messageId} {
        // Users can read/write messages in their own conversations
        allow read, write: if isAuthenticated() &&
                              get(/databases/$(database)/documents/chatConversations/$(conversationId)).data.userId == request.auth.uid;
        allow create: if isAuthenticated() &&
                         get(/databases/$(database)/documents/chatConversations/$(conversationId)).data.userId == request.auth.uid;
      }
    }
    
    // Gear - Equipment and gear management
    match /gear/{gearId} {
      allow read: if isAuthenticated();
      allow write: if isCreatorOrHigher();
    }
    
    // Progress - User learning progress (subcollections)
    match /progress/{userId}/items/{itemId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Saved responses - User saved AI coaching responses
    match /savedResponses/{responseId} {
      allow read, write: if isAuthenticated() &&
                            resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['messageId', 'content', 'question', 'creatorId', 'userId']) &&
                       request.resource.data.messageId is string &&
                       request.resource.data.content is string &&
                       request.resource.data.question is string &&
                       request.resource.data.creatorId is string &&
                       request.resource.data.userId is string;
    }
    
    // Availability - Creator availability schedules
    match /availability/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Sessions - Coaching session management
    match /sessions/{sessionId} {
      allow read: if isOwner(resource.data.userUid) ||
                     isOwner(resource.data.creatorUid) ||
                     isAdmin();
      allow write: if isCreatorOrHigher();
    }

    // User sessions subcollection - User-specific session data
    match /users/{userId}/sessions/{sessionId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Requests - General user requests
    match /requests/{requestId} {
      allow read: if isOwner(resource.data.uid) || isAdmin();
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
    }
    
    // Admin settings - Platform configuration (superadmin only)
    match /admin/{document} {
      allow read, write: if isSuperAdmin();
    }

    // Audit logs - System audit trail (admin read, system write)
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // Allow system to write audit logs
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // Analytics collections - Performance metrics (creators can access their own)
    match /creatorAnalytics/{creatorId} {
      allow read, write: if isOwner(creatorId) || isAdmin();
    }

    match /lessonAnalytics/{lessonId} {
      allow read, write: if isAdmin() ||
                            (isCreatorOrHigher() &&
                             exists(/databases/$(database)/documents/content/$(lessonId)) &&
                             get(/databases/$(database)/documents/content/$(lessonId)).data.creatorUid == request.auth.uid);
    }

    match /userAnalytics/{userId} {
      allow read, write: if isAdmin();
    }

    match /systemAnalytics/{date} {
      allow read, write: if isAdmin();
    }

    // Invitations - Athlete and coach invitation system
    match /invitations/{invitationId} {
      // Anyone can read valid invitations to validate them
      allow read: if true;
      // Only creators/coaches/admins can create invitations
      allow create: if isCreatorOrHigher() &&
                       request.resource.data.keys().hasAll(['coachId', 'role', 'status']) &&
                       request.resource.data.coachId == request.auth.uid;
      // Only the creator or admin can update their invitations
      allow update: if (isCreatorOrHigher() && resource.data.coachId == request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }

    // Athletes - Athlete profiles and training data
    match /athletes/{athleteId} {
      // Athletes can read their own profile, coaches can read their athletes, admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.uid == request.auth.uid ||
                      resource.data.coachId == request.auth.uid ||
                      isAdmin());
      // Server-side creates athlete profiles via admin SDK
      allow create: if false; // Only via server-side admin SDK
      // Athletes and their coaches can update athlete profiles
      allow update: if isAuthenticated() &&
                       (resource.data.uid == request.auth.uid ||
                        resource.data.coachId == request.auth.uid ||
                        isAdmin());
      allow delete: if isAdmin();
    }

    // Coach applications - Coach application and approval process
    match /coach_applications/{applicationId} {
      // Admins can read all, applicants can read their own if they have userId set
      allow read: if isAdmin() ||
                     (isAuthenticated() &&
                      resource.data.userId != null &&
                      resource.data.userId == request.auth.uid);
      // Anyone can create applications (for simple invitation flow)
      allow create: if true;
      // Only admins can update or delete applications
      allow update, delete: if isAdmin();
    }

    // Messages - Athlete-coach direct messaging with immutability
    match /messages/{messageId} {
      // Users can read messages where they are sender or recipient
      allow read: if isAuthenticated() &&
                     (resource.data.senderId == request.auth.uid ||
                      resource.data.recipientId == request.auth.uid ||
                      isAdmin());
      // Users can create messages where they are the sender
      allow create: if isAuthenticated() &&
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['senderId', 'recipientId', 'content', 'participants']) &&
                       request.resource.data.participants.hasAll([request.auth.uid, request.resource.data.recipientId]) &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() > 0 &&
                       request.resource.data.content.size() <= 2000;
      // Users can ONLY update read status - messages are immutable
      allow update: if isAuthenticated() &&
                       resource.data.recipientId == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      // Messages CANNOT be deleted - permanent audit trail for safety
      allow delete: if false;
    }

    // Message Audit Logs - Immutable audit trail
    match /message_audit_logs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();
      // Audit logs created by system only
      allow create: if false;
      // Audit logs are immutable
      allow update, delete: if false;
    }

    // Moderation Alerts - Safety monitoring
    match /moderation_alerts/{alertId} {
      // Only admins can read moderation alerts
      allow read: if isAdmin();
      // System creates alerts
      allow create: if false;
      // Admins can update status
      allow update: if isAdmin();
      // Cannot delete alerts
      allow delete: if false;
    }

    // Message Reports - User-generated reports
    match /message_reports/{reportId} {
      // Users can read their own reports, admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.reportedBy == request.auth.uid || isAdmin());
      // Users can create reports
      allow create: if isAuthenticated() &&
                       request.resource.data.reportedBy == request.auth.uid;
      // Only admins can update reports
      allow update: if isAdmin();
      // Cannot delete reports
      allow delete: if false;
    }

    // Feature Flags - Platform feature toggles
    match /feature_flags/{flagId} {
      // All authenticated users can read feature flags
      allow read: if isAuthenticated();
      // Only admins can write feature flags
      allow write: if isAdmin();
    }

    // Admin Invitations - Platform admin invitation system
    match /admin_invitations/{invitationId} {
      // Only admins can read and create admin invitations
      allow read, create: if isAdmin();
      // Only admins can update invitation status
      allow update: if isAdmin();
      // Cannot delete invitations (audit trail)
      allow delete: if false;
    }

    // User Signups - Recent user signup tracking for admin dashboard
    match /userSignups/{signupId} {
      // Only admins can read user signups
      allow read: if isAdmin();
      // System creates signup records
      allow create: if isAuthenticated();
      // Cannot update or delete signup records (audit trail)
      allow update, delete: if false;
    }

    // Admin Notifications - Admin notification system
    match /adminNotifications/{notificationId} {
      // Only admins can read notifications
      allow read: if isAdmin();
      // System creates notifications
      allow create: if isAuthenticated();
      // Admins can update notifications (mark as read)
      allow update: if isAdmin();
      // Cannot delete notifications
      allow delete: if false;
    }

    // Curated Gear - Recommended equipment and gear
    match /curatedGear/{gearId} {
      // Anyone can read curated gear
      allow read: if true;
      // Only admins can create/update/delete gear
      allow write: if isAdmin();
    }

    // Videos - Video content management
    match /videos/{videoId} {
      // Anyone authenticated can read published videos
      allow read: if isAuthenticated() &&
                     (resource.data.status == 'published' ||
                      resource.data.creatorId == request.auth.uid ||
                      isAdmin());
      // Creators and coaches can create videos
      allow create: if isCreatorOrHigher() &&
                       request.resource.data.creatorId == request.auth.uid;
      // Creators can update their own videos, admins can update any
      allow update: if (isCreatorOrHigher() && resource.data.creatorId == request.auth.uid) || isAdmin();
      // Only admins can delete videos
      allow delete: if isAdmin();
    }

    // Creators Index - Creator discovery index
    match /creators_index/{creatorId} {
      // Anyone can read the creators index
      allow read: if true;
      // Only admins and the creator themselves can write
      allow write: if isOwner(creatorId) || isAdmin();
    }

    // ===== DEFAULT DENY =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
