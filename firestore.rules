rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role checking
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth != null ? (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 
          'user' // Safe fallback for new users during initial creation
      ) : null;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() in ['admin', 'superadmin'];
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'superadmin';
    }
    
    function isCreator() {
      return isAuthenticated() && getUserRole() in ['creator', 'admin', 'superadmin'];
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection - for user profiles and role management
    match /users/{userId} {
      // Users can read their own profile; admins can read all
      allow read: if isOwner(userId) || isAdmin();

      // Create: authenticated user creating their own doc
      allow create: if isAuthenticated() && isOwner(userId);

      // Update: owners can update their own doc BUT cannot change 'role';
      // only admins can change 'role' or update any user
      allow update: if (
        (isOwner(userId) && (
          // Disallow owner from elevating role
          request.resource.data.role == resource.data.role
        )) || isAdmin()
      );

      // Delete: only admins
      allow delete: if isAdmin();

      // (Temporary exception removed)
    }

    // Creator profiles - detailed creator information
    match /creator_profiles/{creatorId} {
      // Creators can manage their own profiles
      // Admins can read all creator profiles
      // Users can read creator profiles for discovery
      allow read: if true; // Public read for creator discovery
      allow write: if isOwner(creatorId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(creatorId);
    }

    // Creators index - for discovery and search
    match /creators_index/{creatorId} {
      // Public read for creator discovery
      // Only creators can update their own index entry
      // Admins can manage all entries
      allow read: if true;
      allow write: if isOwner(creatorId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(creatorId);
    }

    // Content management - lessons, videos, etc.
    match /content/{contentId} {
      // Public read for published content
      // Creators can manage their own content  
      // Admins can manage all content
      // TEMPORARY: Allow all reads for testing - REMOVE IN PRODUCTION
      allow read: if true;
      allow write: if isOwner(resource.data.creatorUid) || isAdmin();
      allow create: if true; // Allow creation for testing
    }

    // Coaching requests - user requests for coaching
    match /coaching_requests/{requestId} {
      // Fixed security rules with correct field names
      // Users can read/write their own requests
      // Creators can read requests targeting them
      // Admins can read/write all requests
      allow read: if isOwner(resource.data.userId) || 
                    (resource.data.targetCreatorUid != null && isOwner(resource.data.targetCreatorUid)) || 
                    isAdmin();
      allow write: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated();
    }

    // Progress tracking - user learning progress
    match /progress/{userId}/items/{itemId} {
      // Users can manage their own progress
      // Admins can read all progress
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
    }

    // User requests/support tickets
    match /requests/{requestId} {
      // Users can read/write their own requests
      // Creators can read requests targeting them
      // Admins can read/write all requests
      allow read: if isOwner(resource.data.uid) || isOwner(resource.data.targetCreatorUid) || isAdmin();
      allow write: if isOwner(resource.data.uid) || isAdmin();
      allow create: if isAuthenticated();
    }

    // Legacy analytics data - system metrics
    match /analytics/{document=**} {
      // Only admins and superadmins can access analytics
      allow read, write: if isAdmin();
    }

    // Creator analytics - individual creator metrics
    match /creatorAnalytics/{creatorId} {
      // Creators can read/write their own analytics
      // Admins can read/write all creator analytics
      allow read, write: if isOwner(creatorId) || isAdmin();
      allow create: if isAuthenticated() && (isOwner(creatorId) || isAdmin());
    }

    // Lesson analytics - per-lesson metrics
    match /lessonAnalytics/{lessonId} {
      // Anyone can read lesson analytics for public content
      // Content creators can write to their lesson analytics
      // System/admins can write to any lesson analytics
      allow read: if true; // Public read for published content analytics
      allow write: if isAuthenticated() || isAdmin();
      allow create: if isAuthenticated() || isAdmin();
    }

    // User analytics - individual user metrics
    match /userAnalytics/{userId} {
      // Users can read/write their own analytics
      // Admins can read/write all user analytics
      allow read, write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // System configuration and settings
    match /settings/{document=**} {
      // Only superadmins can modify system settings
      // Admins can read settings
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }

    // User subscriptions and billing
    match /subscriptions/{userId} {
      // Users can read their own subscription
      // Admins can read all subscriptions
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin(); // Only admins can modify subscriptions
    }

    // Creator earnings and payouts
    match /creator_earnings/{creatorId} {
      // Creators can read their own earnings
      // Admins can read/write all earnings
      allow read: if isOwner(creatorId) || isAdmin();
      allow write: if isAdmin();
    }

    // Notifications
    match /notifications/{userId}/messages/{messageId} {
      // Users can read their own notifications
      // System can create notifications for users
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
    }

    // Reviews and ratings
    match /reviews/{reviewId} {
      // Public read for all reviews
      // Users can create reviews for content they've accessed
      // Only review authors and admins can modify
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Chat/messaging between users and creators
    match /messages/{chatId}/messages/{messageId} {
      // Participants can read/write messages in their chats
      allow read, write: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || request.auth.uid in request.resource.data.participants);
      allow create: if isAuthenticated();
    }

    // Events and workshops
    match /events/{eventId} {
      // Public read for published events
      // Creators can manage their own events
      // Admins can manage all events
      allow read: if resource.data.status == 'published' || isOwner(resource.data.creatorId) || isAdmin();
      allow write: if isOwner(resource.data.creatorId) || isAdmin();
      allow create: if isAuthenticated() && isCreator();
    }

    // Event registrations
    match /event_registrations/{registrationId} {
      // Users can read/write their own registrations
      // Event creators can read registrations for their events
      // Admins can read/write all registrations
      allow read: if isOwner(resource.data.userId) || isOwner(resource.data.creatorId) || isAdmin();
      allow write: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated();
    }

    // Default deny rule for any unmatched documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules for file uploads
service firebase.storage {
  match /b/{bucket}/o {
    // User profile pictures
    match /profile-pictures/{userId}/{fileName} {
      allow read: if true; // Public read for profile pictures
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Content uploads (videos, thumbnails, etc.)
    match /content/{creatorId}/{fileName} {
      allow read: if true; // Public read for published content
      allow write: if request.auth != null && request.auth.uid == creatorId;
    }
    
    // Coaching files (for file review requests)
    match /coaching-files/{userId}/{fileName} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         exists(/databases/(default)/documents/users/$(request.auth.uid)) && 
         get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['creator', 'admin', 'superadmin']);
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // General uploads directory
    match /uploads/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admin uploads
    match /admin/{fileName} {
      allow read: if true; // Public read for admin uploads (logos, etc.)
      allow write: if request.auth != null && 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) && 
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
  }
}
